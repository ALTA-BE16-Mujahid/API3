// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	user "github.com/mujahxd/api3-jwt/user"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: ID
func (_m *Service) GetUserByID(ID int) (user.User, error) {
	ret := _m.Called(ID)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (user.User, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(int) user.User); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPhoneAvailable provides a mock function with given fields: input
func (_m *Service) IsPhoneAvailable(input user.CheckPhoneInput) (bool, error) {
	ret := _m.Called(input)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(user.CheckPhoneInput) (bool, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(user.CheckPhoneInput) bool); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(user.CheckPhoneInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: input
func (_m *Service) Login(input user.LoginInput) (user.User, error) {
	ret := _m.Called(input)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.LoginInput) (user.User, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(user.LoginInput) user.User); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.LoginInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: input
func (_m *Service) RegisterUser(input user.RegisterUserInput) (user.User, error) {
	ret := _m.Called(input)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.RegisterUserInput) (user.User, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(user.RegisterUserInput) user.User); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.RegisterUserInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: inputID, inputData
func (_m *Service) UpdateUser(inputID int, inputData user.RegisterUserInput) (user.User, error) {
	ret := _m.Called(inputID, inputData)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, user.RegisterUserInput) (user.User, error)); ok {
		return rf(inputID, inputData)
	}
	if rf, ok := ret.Get(0).(func(int, user.RegisterUserInput) user.User); ok {
		r0 = rf(inputID, inputData)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(int, user.RegisterUserInput) error); ok {
		r1 = rf(inputID, inputData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
