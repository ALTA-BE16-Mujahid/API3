// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	user "github.com/mujahxd/api3-jwt/user"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ID
func (_m *Repository) FindByID(ID int) (user.User, error) {
	ret := _m.Called(ID)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (user.User, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(int) user.User); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPhone provides a mock function with given fields: phone
func (_m *Repository) FindByPhone(phone string) (user.User, error) {
	ret := _m.Called(phone)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.User, error)); ok {
		return rf(phone)
	}
	if rf, ok := ret.Get(0).(func(string) user.User); ok {
		r0 = rf(phone)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *Repository) Save(_a0 user.User) (user.User, error) {
	ret := _m.Called(_a0)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 user.User) (user.User, error) {
	ret := _m.Called(_a0)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
